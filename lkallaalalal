from tkinter import *
from functools import partial  # To prevent unwanted windows


class StartGame:
    """
    Initial Game interface (ask users how many rounds they
    would like to play)
    """

    def __init__(self):
        """
        Gets number of rounds from user
        """
        self.start_frame = Frame(pady=10, padx=10)
        self.start_frame.grid()
        # Create play button
        self.play_button = Button(self.start_frame, font=("Arial", "16", "bold"),
                                  fg="#FFFFFF", bg="#0057D8", text="Play", width=10,
                                  command=self.check_rounds)
        self.play_button.grid(row=0, column=1, padx=20, pady=20)

    def check_rounds(self):
        """
        Checks user has entered 1 or more rounds
        """
        # Retrieve temperature to be converted
        rounds_wanted = 5
        self.to_play(rounds_wanted)

    def to_play(self, num_rounds):
        """
        Invokes Game GUI and takes across number of rounds to be played.
        """
        Play(num_rounds)
        # hide root window (ie: hide rounds choice window)
        root.withdraw()


class Play:
    """
    Interface for playing the Colour Quest Game
    """

    def __init__(self, how_many):
        self.rounds_won = IntVar()
        # lists for stats components
        # random scores
        self.all_scores_list = [20, 19, 19, 0, 0]
        self.highest_score_list = [20, 19, 20, 20, 20]
        self.rounds_won.set(4)

        # lowest score test data
        # all scores [0, 0, 0, 0, 0]
        # highest score [19, 20, 20, 18, 19]
        # self.rounds_won.set(0)

        # highest score test data
        # all scores [20, 8, 20, 14, 20]
        # highest score [20, 20, 20, 14, 20]
        # self.rounds_won.set(5)

        self.play_box = Toplevel()
        self.game_frame = Frame(self.play_box)
        self.game_frame.grid(padx=10, pady=10)
        self.heading_label = Label(self.game_frame, text="Colour Quest", font="Arial",
                                   padx=5, pady=5)
        self.heading_label.grid(row=0)
        self.stats_button = Button(self.game_frame, font=("Arial", "14", "bold"),
                                   text="stats", width=15, fg="#FFFFFF",
                                   bg="#FF8000", padx=10, pady=10, command=self.to_stats)
        self.stats_button.grid(row=1)

    def to_stats(self):
        """
        retrieves stats for playing game
        """
        # retrieve number of rounds
        # won as a number
        rounds_won = self.rounds_won.get()
        stats_bundle = [rounds_won, self.all_scores_list,
                        self.highest_score_list]

        Stats(self, stats_bundle)


class Stats:
    """
    Displays stats for Colour Quest Game
    """

    def __init__(self, partner, all_stats_info):
        # extract information from master list
        rounds_won = all_stats_info[0]
        user_scores = all_stats_info[1]
        high_scores = all_stats_info[2]

        # sort user scores to find high scores
        user_scores.sort()

        # setup dialogue box

        self.stats_box = Toplevel()
        # disable stat button
        partner.stats_button.config(state=DISABLED)

        # if users press cross at top, close help and release help button
        self.stats_box.protocol('WM_DELETE_WINDOW',
                                partial(self.close_stats, partner))

        self.stats_frame = Frame(self.stats_box, width=300, )
        self.stats_frame.grid()

        # math to populate stats dialogue
        rounds_played = len(user_scores)

        success_rate = rounds_won / rounds_played * 100
        total_score = sum(user_scores)
        max_possible = sum(high_scores)

        best_score = user_scores[-1]
        average_score = total_score / rounds_played

        # str for stats labels
        success_string = (f"Success Rate: {rounds_won} / {rounds_played} ({success_rate:.0f}%)")

    def close_stats(self, partner):
        """
        Closes stats dialogue box (and enables stats button)
        """
        # put stats button back to normal
        partner.stats_button.config(state=NORMAL)
        self.stats_box.destroy()


# main routine
if __name__ == "__main__":
    root = Tk()
    root.title("Colour Quest")
    StartGame()
    root.mainloop()
