from tkinter import *
from functools import partial
import all_constants as c
import conv_rounding as cr


class Converter():
    """"""
    "Temperature Converter tool ( °C to °F, °F to °C)"
    """"""

    # This part of the code is responsible for the title of the program (Temperature Converter)
    def __init__(self):
        """Temperature Convertor GUI"""

        self.all_calculations_list = ['10.0 F is -12C', '20.0 F is -7C',
                                      '30 F is -1 C', '40.0 F is 4C',
                                      '50F is 10C', '60.0 F is 16C']

        self.temp_frame = Frame(padx=10, pady=10)
        self.temp_frame.grid()

        self.temp_heading = Label(self.temp_frame,
                                  text="Temperature Converter",
                                  font=("Times New Roman", "16", "bold"))

        self.temp_heading.grid(row=0)

        # This part codes for instructions of the GUI Calculator

        instructions = ("Please enter a temperature below, then press one of the buttons to convert to °C/°F. Please "
                        "press help button for more information.")
        self.temp_instructions = Label(self.temp_frame,
                                       text=instructions,
                                       wraplength=250, width=40,
                                       justify="left")
        self.temp_instructions.grid(row=1)
        self.temp_entry = Entry(self.temp_frame,
                                font=("Times New Roman", "14",))
        self.temp_entry.grid(row=2, padx=10, pady=10)
        error = "Please enter a number"
        self.answer_error = Label(self.temp_frame, text=error,
                                  fg="#9C0000")
        self.answer_error.grid(row=3)

        self.button_frame = Frame(self.temp_frame)
        self.button_frame.grid(row=4)

        # Button list  (text|colour|command||row|column)
        button_detail_list = [
            ["To Celsius", "#7C444F", lambda: self.check_temp(c.ABS_ZERO_FARENHEIGHT), 0, 0],
            ["To Fahrenheit", "#9F5255", lambda: self.check_temp(c.ABS_ZERO_CELCIUS), 0, 1],
            ["Help/Info", "#F39E60", self.to_help, 1, 0],
            ["History/Export", "#E16A54", "", 1, 1]
        ]
        # this is a list for the buttons once they have been made
        self.button_ref_list = []
        for item in button_detail_list:
            self.make_button = Button(self.button_frame,
                                      text=item[0], bg=item[1],
                                      fg="#FFFFFF", font=("Times New Roman", "12", "bold"),
                                      width=12, command=item[2])
            self.make_button.grid(row=item[3], column=item[4], padx=5, pady=5)
            self.button_ref_list.append(self.make_button)

        # help button retrieve
        self.to_help_button = self.button_ref_list[2]
        # history/export button would be disabled at the start of calculations
        self.to_history_button = self.button_ref_list[3]
        self.to_history_button.config(state=DISABLED)

    def check_temp(self, min_temp):
        # this codes for valid in the range temp, shows whether its workable or not/ inputs error

        # retrieve temp to be converted
        to_convert = self.temp_entry.get()

        # reset label after empty error
        self.answer_error.config(fg="#004C99")
        self.temp_entry.config(bg="#FFFFFF")

        error = f"Enter a number >/= to {min_temp}"
        has_errors = "no"

        # checks if the chosen temp can be converted in the given range
        try:
            to_convert = float(to_convert)
            if to_convert >= min_temp:
                self.convert(min_temp, to_convert)
            else:
                has_errors = "yes"
                error = "too low"
        except ValueError:
            has_errors = "yes"

        if has_errors == "yes":
            self.answer_error.config(text=error, fg="#E44C4C", font=("Times New Roman", "12", "bold"))
            self.temp_entry.config(bg="#F2A0BB")
            self.temp_entry.delete(0, END)

    def convert(self, min_temp, to_convert):
        # converts temperature and updates answer label, store/ export
        if min_temp == c.ABS_ZERO_CELCIUS:
            answer = cr.to_farenheight(to_convert)
            answer_statement = f"{to_convert} C is {answer} F"

        else:
            answer = cr.to_celcius(to_convert)
            answer_statement = f"{to_convert} F is {answer} C"

        self.to_history_button.config(state=NORMAL)

        self.answer_error.config(text=answer_statement)
        self.all_calculations_list.append(answer)
        print(self.all_calculations_list)

    def to_help(self):
        # displays the help button
        DisplayHelp(self)


class DisplayHelp:

    def __init__(self, partner):
        # setup dialogue box/ colour
        background = "#FFE6CC"
        self.help_box = Toplevel()
        # disable help button after pressed
        partner.to_help_button.config(state=DISABLED)
        # if user presses cross at the top, closes help, releases help button
        self.help_box.protocol("WM_DELETE_WINDOW",
                               partial(self.close_help, partner))

        self.help_frame = Frame(self.help_box, width=300,
                                height=200)
        self.help_frame.grid()

        self.help_heading_label = Label(self.help_frame,
                                        text="help/info",
                                        font=("Times New Roman", "14", "bold"))

        self.help_heading_label.grid(row=0)
        help_text = "To use program, enter the temperature" \
                    "you wish to convert to (c/f)\n\n" \
                    "min temp c is -273" \
                    "min temp f is -459" \
                    "less than min temp will show error message" \
                    "to see history press history button"

        self.help_text_label = Label(self.help_frame,
                                     text=help_text, wraplength=350,
                                     justify="left")
        self.help_text_label.grid(row=1, padx=10)

        self.dismiss_button = Button(self.help_frame,
                                     font=("Times New Roman", "14", "bold"),
                                     text="Dismiss", bg="#CC6600",
                                     fg="#FFFFFF", command=partial(self.close_help, partner))
        self.dismiss_button.grid(row=2, padx=10, pady=10)

        # colour of the background, no buttons

        recolour_list = [self.help_frame, self.help_heading_label,
                         self.help_text_label]
        for item in recolour_list:
            item.config(bg=background)

    def close_help(self, partner):
        # put the button back to normal
        partner.to_help_button.config(state=NORMAL)
        self.help_box.destroy()


# main_routine goes here
if __name__ == "__main__":
    root = Tk()
    root.title("Temperature Converter")
    Converter()
    root.mainloop()
