from tkinter import *
from functools import partial  # to prevent unwanted windows
import all_constants as c


class Converter:
    """"""
    "Temperature Converter tool"
    """"""

    def __init__(self):
        """Temperature Convertor GUI"""

        self.all_calculations_list = ['10.0 F is -12C', '20.0 F is -7C',
                                      '30 F is -1 C', '40.0 F is 4C',
                                      '50F is 10C', '60.0 F is 16C']

        self.temp_frame = Frame(padx=10, pady=10)
        self.temp_frame.grid()

        self.to_history_button = Button(self.temp_frame,
                                        text="History/Export",
                                        bg="#E16A54",
                                        fg="#ffffff",
                                        font=("Times New Roman", "12", "bold"), width=12,
                                        command=self.to_history)
        self.to_history_button.grid(row=1, padx=5, pady=5)

    def to_history(self):
        # displays the history button
        HistoryExport(self, self.all_calculations_list)


class HistoryExport:
    """
    display history dialogue box
    """

    def __init__(self, partner, calculations):

        self.history_box = Toplevel()

        # disable history button after pressed
        partner.to_history_button.config(state=DISABLED)

        # if user presses cross at the top, closes history, releases history button
        self.history_box.protocol("WM_DELETE_WINDOW",
                                  partial(self.close_history, partner))

        self.history_frame = Frame(self.history_box)
        self.history_frame.grid()

        # background and calculations colours
        if len(calculations) <= c.MAX_CALCS:
            calc_back = "#d5e8d4"
            calc_amount = "all_your"
        else:
            calc_back = "#ffe6cc"
            calc_amount = (f"your recent calculations - "
                           f"showing {c.MAX_CALCS} / {len(calculations)}")

        # str for calculations list
        newest_first_string = ''
        newest_first_list = list(reversed(calculations))

        if len(newest_first_list) <= c.MAX_CALCS:

            for item in newest_first_list[:-1]:
                newest_first_string += item + "\n"
            newest_first_string += newest_first_list[-1]

        # if there is mor than 5 calculations
        else:
            for item in newest_first_list[:c.MAX_CALCS - 1]:
                newest_first_string += item + "\n"
            newest_first_string += newest_first_list[c.MAX_CALCS - 1]

        # str for long labels
        recent_intro_txt = (f"Below are {calc_amount}"
                            " temperature calculations."
                            " all calculations are "
                            "shown to the nearest degree")
        export_instructions_txt = ("if you would like to export please press the"
                                   "following button")

        calculations = ""

        # label list (label txt| format| bg)
        history_labels_list = [
            ["History/Export", ("Times New Roman", "16", "bold"), None],
            [recent_intro_txt, ("Times New Roman", "11"), None],
            [newest_first_string, ("Times New Roman", "14"), calc_back],
            [export_instructions_txt, ("Times New Roman", "11"), None]
        ]

        history_labels_ref = []
        for count, item in enumerate(history_labels_list):
            make_label = Label(self.history_box, text=item[0], font=item[1],
                               bg=item[2],
                               wraplength=300, justify="left", pady=10, padx=20)
            make_label.grid(row=count)

            history_labels_ref.append(make_label)

        # retrieve export instructions label so we can
        # configure it to show the filename if user exports file
        self.export_filename_label = history_labels_ref[3]

        # make frame to hold buttons
        self.hist_button_frame = Frame(self.history_box)
        self.hist_button_frame.grid(row=4)

        button_ref_list = []

        # button list (txt|bg|command|row|column)
        button_details_list = [
            ["Export", "#004C99", "", 0, 0],
            ["Close", '#666666', partial(self.close_history, partner), 0, 1],
        ]

        for btn in button_details_list:
            self.make_button = Button(self.hist_button_frame,
                                      text=btn[0],
                                      bg=btn[1],
                                      fg="#ffffff",
                                      font=("Times New Roman", "12", "bold"), width=12,
                                      command=btn[2])
            self.make_button.grid(row=btn[3], column=btn[4], padx=10, pady=10)

        self.history_text_label = Label(self.history_frame,
                                        text='history_text', wraplength=350,
                                        justify="left")
        self.history_text_label.grid(row=1, padx=10)

    def close_history(self, partner):
        # put the button back to normal
        partner.to_history_button.config(state=NORMAL)
        self.history_box.destroy()


# main_routine goes here
if __name__ == "__main__":
    root = Tk()
    root.title("Temperature Converter")
    Converter()
    root.mainloop()
